import os
from dotenv import load_dotenv, find_dotenv
from aiogram import Bot, Dispatcher, types, executor

load_dotenv(find_dotenv('.tokens'))
TOKEN = os.getenv('aiogramEgo_bot')

# –ó–∞–¥–∞—á–∞: –∫–æ–º–∞–Ω–¥—ã - –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –æ–ø–∏—Å–∞–Ω–∏–µ - –∫—É—Ä—Å–∏–≤–æ–º
HELP = '''
<b>/start</b> - <em>–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</em>
<b>/give</b> - <em>–ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä</em>
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
'''

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)


# –ó–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup(_):
    print('Bot is online!')


@dp.message_handler(commands=['start'])
async def start_cmd(msg: types.Message):
    await msg.answer(text='<em><b>Welcome!</b></em>', parse_mode='HTML')


# –ó–∞–¥–∞—á–∞: –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
@dp.message_handler(commands=['give'])
async def give_cmd(msg: types.Message):
    await msg.reply(text="It's funny üòÅ")
    await bot.send_sticker(
        msg.from_user.id,
        sticker='CAACAgQAAxkBAAEGdRFjdo3VffEFqU5ISaRqTOra_vRP-AACUwEAAnscSQABkGvNmCt56yQrBA',
    )


# –ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
@dp.message_handler(content_types=['sticker'])
async def get_sticker_id(msg: types.Message):
    await msg.reply(text=f'Sticker ID:\n{msg.sticker.file_id}')


@dp.message_handler(commands=['help'])
async def help_cmd(msg: types.Message):
    await msg.reply(text=HELP, parse_mode='HTML')


# –ó–∞–¥–∞—á–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ "—Å–µ—Ä–¥—Ü–µ", –æ—Ç–≤–µ—Ç–∏—Ç—å "—á–µ—Ä–Ω—ã–º —Å–µ—Ä–¥—Ü–µ–º"
# –ó–∞–¥–∞—á–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ "–≥–∞–ª–æ—á–∫–∞", –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
@dp.message_handler()
async def echo_cmd(msg: types.Message):
    if '‚ù§Ô∏è' in msg.text:
        await msg.reply(text='üñ§')
    if '‚úÖ' in msg.text:
        await msg.reply(text=f"‚úÖ x{str(msg.text.count('‚úÖ'))}")


if __name__ == '__main__':
    executor.start_polling(
        dispatcher=dp,
        skip_updates=True,
        on_startup=on_startup,
    )
